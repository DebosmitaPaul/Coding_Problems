using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProblemSolving
{
    class Find_PeakElement
    {
        static void Main(string[] args) //35
        {
            int[] a = { 10, 20, 15, 2, 23, 90, 67 };
            int[] b = { 1, 1, 2, 4, 4, 4, 6, 6 };
            int[] c ={ 2, 3, 9, 2, 2 }; 
            
            PrintArray.Print(a);
            Console.WriteLine();
            PeakElement(a);
            Console.WriteLine("--------------------");

            Majority_Element(b);
            Console.WriteLine("--------------------");

            Majority_Element(c, c.Length/2);
            Console.WriteLine("--------------------");

            Console.Read();
        }

        private static void Majority_Element(int[] a, int mCount)
        {
            int count1 = 0;
            int x = int.MinValue;
            int flag = 0;
            for (int l = 0; l < a.Length; l++)
            {
                if (x != a[l])
                {
                    x = a[l];
                    count1 = 1;
                }
                else
                {
                    count1++;
                }
                if (mCount == count1)
                {
                    flag = 1;
                    break;
                }
            }
            if(flag ==1)
            {
                Console.WriteLine("true");
            }
            else
            {
                Console.WriteLine("false");
            }

        }

        private static void Majority_Element(int[] a)
        {
            int count = 0;
            Dictionary<int, int> dic = new Dictionary<int, int>();
            for (int l = 0; l < a.Length; l++)
            {
                if (dic.ContainsKey(a[l]))
                {
                    dic.TryGetValue(a[l], out int val);
                    val++;
                    dic[a[l]] = val;
                }
                else
                {
                    count = 1;
                    dic.Add(a[l], count);
                }
            }
            int z = dic.Aggregate((x, y) => x.Value > y.Value ? x : y).Key;
            Console.WriteLine(z);
        }

        private static void PeakElement(int[] a)
        {
            int i = 0, j = 1, k = 2;
            while(k<a.Length)
            {
                if(a[j]>a[i] && a[j]> a[k])
                {
                    Console.WriteLine(a[j]);
                }
                i++;
                j++;
                k++;
            }
        }
    }
}
